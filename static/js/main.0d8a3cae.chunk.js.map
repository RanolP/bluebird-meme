{"version":3,"sources":["core/standardRules/apa.ts","core/standardRules/em.ts","core/standardRules/ssi.ts","core/standardRules/tori.ts","styles/colors.ts","components/Converter.tsx","core/standardRules/ssibal.ts","core/standardRules/seungri.ts","core/standardRules/eb.ts","core/standardRules/beer.ts","core/standardRules/bokeum.ts","core/standardRules/evian.ts","core/rule.ts","components/Header.tsx","components/App.tsx","styles/reset.ts","serviceWorker.ts","index.tsx"],"names":["Em","description","process","origin","offset","messages","text","where","from","to","length","word","into","type","output","regexp","Emglish","front","real","back","Ssi","EngliSsi","Tori","josa","Black","hsl","White","Wrap","styled","div","Description","span","Label","label","TextAreaWrap","TextAreaBase","textarea","attrs","wrap","Input","Output","readOnly","CopyButton","button","Results","MessageWrap","Message","message","operation","rules","standardRules","endsWith","sentences","toString","result","last","count","appendLast","substring","trim","Converter","useState","input","setInput","rows","setRows","setResult","textareaInput","useRef","useEffect","current","ClipboardJS","destroy","filter","it","rule","replace","args","groups","slice","wholeString","push","sort","l","r","processRules","Math","round","random","randomRecommendation","onClick","newInput","value","bind","htmlFor","id","placeholder","onChange","target","ref","data-clipboard-text","map","index","key","Link","a","Header","href","App","Reset","createGlobalStyle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","async","navigator","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.0d8a3cae.chunk.js","sourcesContent":["import { Rule } from '../rule';\n\nexport const Apa: Rule = {\n  description: '아파치 서버가 뭐니 버릇 없게',\n  process: (origin, offset) => ({\n    messages: [\n      {\n        origin,\n        text: '아파가 뭐니 편찮다고 해야지',\n        where: {\n          from: offset,\n          to: offset + origin.length\n        },\n        word: {\n          into: '편찮',\n          type: 'replace'\n        }\n      }\n    ],\n    output: '편찮'\n  }),\n  regexp: /(아파)/gm\n};\n","import { Rule } from '../rule';\n\nconst description = '엠/앰은 비속어입니다.';\nconst text = '어머니, 존경을 담아 부릅니다.';\n\nexport const Em: Rule = {\n  description,\n  process: (origin, offset) => ({\n    messages: [\n      {\n        origin,\n        text,\n        where: {\n          from: offset,\n          to: offset + origin.length\n        },\n        word: {\n          into: '어머니',\n          type: 'replace'\n        }\n      }\n    ],\n    output: '어머니'\n  }),\n  regexp: /([엠앰])/gm\n};\n\nexport const Emglish: Rule = {\n  description,\n  process: (origin, offset, [front, real, back]) => ({\n    messages: [\n      {\n        origin: real,\n        text,\n        where: {\n          from: offset,\n          to: offset + origin.length\n        },\n        word: {\n          into: '어머니',\n          type: 'replace'\n        }\n      }\n    ],\n    output: `${front}어머니${back}`\n  }),\n  regexp: /(^|[^a-zA-Z])([Mm])([^a-zA-Z]|$)/gm\n};\n","import { Rule } from '../rule';\n\nconst description =\n  '요즘 젊은 것들은 버르장머리 없게 선배님들을 ㅇㅇ씨라고 불러?';\nconst text = '선배님께 씨를 붙여 불러, 버르장머리 없이?';\n\nexport const Ssi: Rule = {\n  description,\n  process: (origin, offset) => ({\n    messages: [\n      {\n        origin,\n        text,\n        where: {\n          from: offset,\n          to: offset + origin.length\n        },\n        word: {\n          into: '선배님',\n          type: 'replace'\n        }\n      }\n    ],\n    output: '선배님'\n  }),\n  regexp: /([시씨])/gm\n};\n\nexport const EngliSsi: Rule = {\n  description,\n  process: (origin, offset, [front, real, back]) => ({\n    messages: [\n      {\n        origin: real,\n        text,\n        where: {\n          from: offset,\n          to: offset + origin.length\n        },\n        word: {\n          into: '선배님',\n          type: 'replace'\n        }\n      }\n    ],\n    output: `${front}선배님${back}`\n  }),\n  regexp: /(^|[^a-zA-Z])([Cc])([^a-zA-Z]|$)/gm\n};\n","import { josa } from 'josa';\nimport { Rule } from '../rule';\n\nexport const Tori: Rule = {\n  description:\n    '도리는 일본어에서 유래한 말이므로 닭도리탕 대신 닭볶음탕을 써야 합니다.',\n  process: (origin, offset) => ({\n    messages: [\n      {\n        origin,\n        text: josa(`${origin}는 일본어니 볶음 쓰세요`),\n        where: {\n          from: offset,\n          to: offset + origin.length\n        },\n        word: {\n          into: '볶음',\n          type: 'replace'\n        }\n      }\n    ],\n    output: '볶음'\n  }),\n  regexp: /([도토]리)/gm\n};\n","import { hsl } from 'polished';\n\nexport const Black = hsl(15, 0.15, 0.15);\nexport const White = hsl(230, 0.15, 0.95);\n","import ClipboardJS from 'clipboard';\nimport { josa } from 'josa';\nimport React, { FC, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport {\n  processRules,\n  RuleProcessOutput,\n  RuleProcessOutputMessage\n} from '../core/rule';\nimport * as standardRules from '../core/standardRules';\nimport { Black } from '../styles/colors';\n\nconst Wrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex-grow: 1;\n`;\n\nconst Description = styled.span`\n  font-size: 1.5rem;\n  text-align: center;\n\n  ins {\n    cursor: pointer;\n  }\n`;\n\nconst Label = styled.label`\n  font-size: 1rem;\n  margin-top: 2rem;\n`;\n\nconst TextAreaWrap = styled.div`\n  position: relative;\n  width: calc(100% - 2rem);\n  max-width: 768px;\n`;\n\nconst TextAreaBase = styled.textarea.attrs({\n  wrap: 'off'\n})`\n  font-size: 1.5rem;\n\n  width: calc(100% - 1.2rem);\n  min-height: 2ch;\n\n  border: 1px solid ${Black};\n  border-radius: 0.25rem;\n\n  padding: 0.3rem 0.6rem;\n`;\n\nconst Input = styled(TextAreaBase)``;\n\nconst Output = styled(TextAreaBase).attrs({\n  readOnly: true\n})``;\n\nconst CopyButton = styled.button`\n  position: absolute;\n  right: 0.4rem;\n  top: 0.6rem;\n\n  border: 1px solid black;\n  background-color: hsl(0, 0%, 95%);\n  padding: 0.2rem;\n\n  transition: opacity ease 0.2s, background-color ease 0.2s;\n\n  opacity: 0;\n\n  &:hover {\n    background-color: hsl(0, 0%, 75%);\n  }\n\n  &:active {\n    background-color: hsl(0, 0%, 85%);\n  }\n\n  ${TextAreaWrap}:hover > & {\n    opacity: 1;\n  }\n`;\n\nconst Results = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  width: calc(100% - 2rem);\n  max-width: 768px;\n`;\n\nconst MessageWrap = styled.div`\n  background-color: hsl(230, 35%, 90%);\n  border-radius: 0.2rem;\n\n  width: fit-content;\n  height: fit-content;\n\n  margin-top: 1.2rem;\n  margin-right: 1.2rem;\n  padding: 0.2rem 0.4rem;\n\n  text-align: center;\n\n  display: inline-block;\n\n  &:last-child {\n    margin-bottom: 1.2rem;\n  }\n`;\n\nconst Message: FC<{ message: RuleProcessOutputMessage }> = ({ message }) => {\n  const operation =\n    message.word.type === 'delete'\n      ? `${message.origin} 제거`\n      : message.word.type === 'replace'\n      ? josa(`${message.origin}#{을} ${message.word.into}#{로} 변환`)\n      : '알 수 없는 작업';\n  return (\n    <MessageWrap>\n      {message.text}\n      <br />\n      {operation}\n    </MessageWrap>\n  );\n};\n\nconst rules = [\n  standardRules.Ssibal,\n  standardRules.Ssi,\n  standardRules.EngliSsi,\n  standardRules.Seungri,\n  standardRules.Tori,\n  standardRules.Em,\n  standardRules.Emglish,\n  standardRules.Eb,\n  standardRules.Apa,\n  standardRules.Beer,\n  standardRules.Bokeum,\n  standardRules.Evian\n];\n\nconst sentences = ['다시 십오 년', '비어있는 에비앙 생수', '엠블럼이 멋진 앱'];\n\nfunction toString(messages: RuleProcessOutputMessage[]): string {\n  let result = '';\n  let last = '';\n  let count = 0;\n\n  function appendLast() {\n    result += `\\n${last.length < 10 ? last : `${last.substring(0, 10)}…`}${\n      count > 1 ? ` × ${count}` : ''\n    }`;\n  }\n\n  for (const { text } of messages) {\n    if (last === text) {\n      count++;\n    } else {\n      appendLast();\n      last = text;\n      count = 1;\n    }\n  }\n  appendLast();\n  return result.trim();\n}\n\nconst Converter: FC = () => {\n  const [input, setInput] = useState('');\n  const [rows, setRows] = useState(1);\n  const [result, setResult] = useState<RuleProcessOutput>({\n    messages: [],\n    output: ''\n  });\n  const textareaInput = useRef<HTMLTextAreaElement>(null);\n  const button = useRef<HTMLButtonElement>(null);\n\n  const onInputChange: React.ChangeEventHandler<HTMLTextAreaElement> = ({\n    target: { value }\n  }) => {\n    setInput(value);\n  };\n\n  useEffect(() => {\n    if (button.current) {\n      const clipboard = new ClipboardJS(button.current);\n      return clipboard.destroy;\n    }\n  }, [button]);\n\n  useEffect(() => {\n    setRows([...input].filter(it => it === '\\n').length + 1);\n  }, [input]);\n\n  useEffect(() => {\n    setResult(processRules(input, rules));\n  }, [input]);\n\n  const modifyInput = (newInput: string) => {\n    if (textareaInput.current) {\n      textareaInput.current.value = newInput;\n    }\n    setInput(newInput);\n  };\n\n  const [randomRecommendation] = useState(\n    sentences[Math.round(Math.random() * 100) % sentences.length]\n  );\n\n  return (\n    <Wrap>\n      <Description>\n        파랑새밈!!\n        <br /> 심심하다면 아래에{' '}\n        <ins onClick={modifyInput.bind(null, randomRecommendation)}>\n          {randomRecommendation}\n        </ins>\n        을 입력하거나 저 문장을 눌러보세요.\n      </Description>\n      <Label htmlFor=\"converter-input\">입력</Label>\n      <TextAreaWrap>\n        <Input\n          id=\"converter-input\"\n          placeholder=\"무슨 일이 일어나고 있나요?\"\n          onChange={onInputChange}\n          value={input}\n          rows={rows + 1}\n        />\n      </TextAreaWrap>\n      <Label htmlFor=\"converter-output\">결과</Label>\n      <TextAreaWrap>\n        <Output id=\"converter-output\" value={result.output} rows={rows} />\n        <CopyButton\n          ref={button}\n          data-clipboard-text={`${input} → ${result.output}\\n${toString(\n            result.messages\n          )}`}\n        >\n          Copy\n        </CopyButton>\n      </TextAreaWrap>\n      <Results>\n        {result.messages.map((message, index) => (\n          <Message key={index} message={message} />\n        ))}\n      </Results>\n    </Wrap>\n  );\n};\n\nexport default Converter;\n","import { Rule } from '../rule';\n\nexport const Ssibal: Rule = {\n  description: '씨발쓰지마세요. 여혐 단어입니다.',\n  process: (origin, offset) => ({\n    messages: [\n      {\n        origin,\n        text: `${origin}쓰지마세요`,\n        where: {\n          from: offset,\n          to: offset + origin.length\n        },\n        word: {\n          type: 'delete'\n        }\n      }\n    ],\n    output: ''\n  }),\n  regexp: /([시씨Cc]발|[십씹](?:[팔할])?)/gm\n};\n","import { Rule } from '../rule';\n\nexport const Seungri: Rule = {\n  description: '승리쓰지마세요.',\n  process: (origin, offset) => ({\n    messages: [\n      {\n        origin,\n        text: '승리쓰지마세요',\n        where: {\n          from: offset,\n          to: offset + origin.length\n        },\n        word: {\n          into: '빅토리',\n          type: 'replace'\n        }\n      }\n    ],\n    output: '빅토리'\n  }),\n  regexp: /(승리)/gm\n};\n","import { Rule } from '../rule';\n\nexport const Eb: Rule = {\n  description: '엡/앱은 비속어입니다.',\n  process: (origin, offset) => ({\n    messages: [\n      {\n        origin,\n        text: '아버지, 존경을 담아 부릅니다',\n        where: {\n          from: offset,\n          to: offset + origin.length\n        },\n        word: {\n          into: '아버지',\n          type: 'replace'\n        }\n      }\n    ],\n    output: '아버지'\n  }),\n  regexp: /([엡앱])/gm\n};\n","import { Rule } from '../rule';\n\nexport const Beer: Rule = {\n  description: '비어는 맥주로 대체하십시오.',\n  process: (origin, offset) => {\n    const output = origin.endsWith('었') ? '맥줐' : '맥주';\n    return {\n      messages: [\n        {\n          origin,\n          text: '맥주를 비어 대신 쓰세요',\n          where: {\n            from: offset,\n            to: offset + origin.length\n          },\n          word: {\n            into: output,\n            type: 'replace'\n          }\n        }\n      ],\n      output\n    };\n  },\n  regexp: /(비[어었])/gm\n};\n","import { Rule } from '../rule';\n\nexport const Bokeum: Rule = {\n  description: '복음은 일본어의 잔재입니다. 도리로 대체하는 건 어떨까요?',\n  process: (origin, offset) => ({\n    messages: [\n      {\n        origin,\n        text: '복음은 일본어의 잔재입니다',\n        where: {\n          from: offset,\n          to: offset + origin.length\n        },\n        word: {\n          into: '도리',\n          type: 'replace'\n        }\n      }\n    ],\n    output: '도리'\n  }),\n  regexp: /복음/gm\n};\n","import { Rule } from '../rule';\n\nexport const Evian: Rule = {\n  description: '에비 앙? 상스러워요',\n  process: (origin, offset) => ({\n    messages: [\n      {\n        origin,\n        text: '아버님께서 신음을 하신대도 그렇지..',\n        where: {\n          from: offset,\n          to: offset + origin.length\n        },\n        word: {\n          into: '아버지신음',\n          type: 'replace'\n        }\n      }\n    ],\n    output: '아버지신음'\n  }),\n  regexp: /(에비앙)/gm\n};\n","export interface Rule {\n  regexp: RegExp;\n  description?: string;\n  process(\n    origin: string,\n    offset: number,\n    groups: string[],\n    wholeString: string\n  ): RuleProcessOutput;\n}\n\nexport interface FromTo<T> {\n  from: T;\n  to: T;\n}\n\nexport type WordOperation =\n  | {\n      type: 'delete';\n    }\n  | {\n      type: 'replace';\n      into: string;\n    };\n\nexport interface RuleProcessOutputMessage {\n  origin: string;\n  text: string;\n  where: FromTo<number>;\n  word: WordOperation;\n}\n\nexport interface RuleProcessOutput {\n  messages: RuleProcessOutputMessage[];\n  output: string;\n}\n\nexport function processRules(input: string, rules: Rule[]): RuleProcessOutput {\n  let output = input;\n  const messages: RuleProcessOutputMessage[] = [];\n  for (const rule of rules) {\n    output = output.replace(rule.regexp, (...args) => {\n      const origin = args[0] as string;\n      const groups = args.slice(1, args.length - 2) as string[];\n      const offset = args[args.length - 2] as number;\n      const wholeString = args[args.length - 1] as string;\n      const result = rule.process(origin, offset, groups, wholeString);\n      messages.push(...result.messages);\n      return result.output;\n    });\n  }\n\n  messages.sort((l, r) => l.where.from - r.where.from);\n\n  return {\n    messages,\n    output\n  };\n}\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { Black, White } from '../styles/colors';\n\nconst Wrap = styled.div`\n  width: calc(100% - 0.6rem * 2);\n  background-color: ${Black};\n  color: ${White};\n\n  font-size: 1.2rem;\n\n  padding: 0.3rem 0.6rem;\n\n  display: grid;\n  grid-template-columns: 1fr auto;\n`;\n\nconst Link = styled.a`\n  color: hsl(210, 65%, 85%);\n  text-decoration: none;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst Header: FC = () => {\n  return (\n    <Wrap>\n      <span>파랑새밈 v1.6.1</span>\n      <span>\n        <Link href=\"https://twitter.com/RanolP_777\">Ranol☆P</Link>가 만들었어요!\n      </span>\n    </Wrap>\n  );\n};\n\nexport default Header;\n","import React, { FC } from 'react';\nimport Converter from './Converter';\nimport Header from './Header';\n\nconst App: FC = () => (\n  <>\n    <Header />\n    <Converter />\n  </>\n);\n\nexport default App;\n","import { createGlobalStyle } from 'styled-components';\n\nexport const Reset = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n  }\n\n  textarea {\n    resize: none;\n  }\n\n  textarea {\n    font-family: inherit;\n  }\n\n  textarea {\n    outline: none;\n  }\n\n  #root {\n    max-width: 100vw;\n    min-height: 100vh;\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: Record<string, string> }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', async () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        await checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        await navigator.serviceWorker.ready;\n        console.log(\n          'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n        );\n      } else {\n        // Is not localhost. Just register service worker\n        await registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nasync function registerValidSW(swUrl: string, config?: Config) {\n  try {\n    const registration = await navigator.serviceWorker.register(swUrl);\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (!installingWorker) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log(\n              'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n            );\n\n            // Execute callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.');\n\n            // Execute callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  } catch (error) {\n    console.error('Error during service worker registration:', error);\n  }\n}\n\nasync function checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  try {\n    const response = await fetch(swUrl);\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (\n      response.status === 404 ||\n      (contentType && contentType.indexOf('javascript') === -1)\n    ) {\n      // No service worker found. Probably a different app. Reload the page.\n      try {\n        const registration = await navigator.serviceWorker.ready;\n        await registration.unregister();\n        window.location.reload();\n      } catch {\n        // do nothing\n      }\n    } else {\n      // Service worker found. Proceed as normal.\n      await registerValidSW(swUrl, config);\n    }\n  } catch {\n    console.log(\n      'No internet connection found. App is running in offline mode.'\n    );\n  }\n}\n\nexport async function unregister() {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      registration.unregister();\n    } catch {\n      // do nothing\n    }\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { Reset } from './styles/reset';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <Reset />\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}